(* This is a yous oberon program *)
MODULE YousOberon_Program;
	CONST size = 8;
	TYPE ARRAY_TYPE = ARRAY 10 of INTEGER;
	VAR sort_array : ARRAY_TYPE;

	PROCEDURE cocktail_sort;
		VAR left, right, i, j : INTEGER;

	BEGIN
		(* call the subprogram *)
		left := 0;
		right := size-1;
		
		WHILE left < right DO
			
			(* front to back *)
			i := left;
			WHILE i < right DO
				IF sort_array[i] > sort_array[i+1] THEN
					swap(i, i+1);
				ELSIF sort_array[i] = sort_array[i+1] THEN
					WRITE(1);
					WRITELN();
				ELSE
					WRITE(2);
					WRITELN();
				END;
			i := i + 1;
			END;
			right := right - 1;

			(* back to front *)
			j := right;
			WHILE j > left DO
				IF sort_array[i-1] > sort_array[i] THEN
					swap(i-1, i);
				ELSIF sort_array[i-1] = sort_array[i] THEN
					WRITE(1);
					WRITELN();
				ELSE
					WRITE(2);
					WRITELN();
				END;
			END;
			left := left + 1;
		END;	
	
		output();
	END cocktail_sort;

	PROCEDURE swap(VAR index_1 : INTEGER; VAR index_2 : INTEGER);
		VAR temp : INTEGER;
		
	BEGIN
		temp := sort_array[index_1];
		sort_array[index_1] := sort_array[index_2];
		sort_array[index_2] := temp;
	END swap;

	PROCEDURE output;
		VAR i : INTEGER;

	BEGIN
		i := 0;
		while i < size DO
			WRITE(sort_array[i]);
			WRITELN();
		END;
	END output;
	
BEGIN
	(* call the function *)
	sort_array[0] := 6;
	sort_array[1] := 5;
	sort_array[2] := 3;
	sort_array[3] := 1;
	sort_array[4] := 8;
	sort_array[5] := 7;
	sort_array[6] := 2;
	sort_array[7] := 4;
	cocktail_sort();
	
END YousOberon_Program.



			
		

