/* this is a oberon.cup */
/*
author: you
date: 2018/06/26
*/

/* ----------------------Preliminary Declarations Section--------------------*/
import java_cup.runtime.*;
import java.util.*;
import exceptions.*;
//import callgraph.*;
import flowchart.*;
parser code
{:
	// 绘制函数流程图的接口类
	Module main_Module;
	// 绘制函数流程图的函数主体的类
	Procedure procedure;
	/* 绘制函数流程图中while循环部分的WhileStatement对象的栈和IfStatement对象的栈，
	因为while循环可能会有多层循环或者if语句条件判断的多层嵌套 */
	Stack<WhileStatement> while_stack;
	Stack<IfStatement>  if_stack;
	/* a stack to store the current state of the statement 0:procedure, 1:while_statement, 2:if_statement */
	Stack<Integer> int_stack;
	// 类型别名和基本类型(INTEGER, BOOLEAN)的HashMap
	HashMap<String, String> newtype_type_HashMap;
	// 变量和变量类型的HashMap
	HashMap<String, String> identifier_type_HashMap;

	

:}

init with 
{:
	main_Module = new Module("Oberon-0 FlowChart");
	while_stack = new Stack();
	if_stack = new Stack();
	int_stack = new Stack();
	newtype_type_HashMap = new HashMap();
	identifier_type_HashMap = new HashMap();
:}

scan with {: return getScanner().next_token(); :};
	


/* ------------Declaration of Terminals and Non Terminals Section----------- */
/* Terminals (tokens returned by the scanner).  */

   /* Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */

/* reserved word */
terminal String	MODULE, PROCEDURE, CONST, TYPE, VAR, RECORD, ARRAY, OF, WHILE, DO, IF, THEN, ELSIF, ELSE, BEGIN, END, INTEGER, BOOLEAN;

/* logic operator */
terminal String	OR, AND, NOT;

/* relation operator */
terminal String	EQUAL, UNEQUAL, LESS, LESS_EQUAL, GREAT, GREAT_EQUAL;

/* addictive operator */
terminal String	PLUS, MINUS;

/* multiplicative operator */
terminal String	TIMES, DIVIDE, MOD;

/* type operator */
terminal String	COLON;

/* selected_operator */
terminal String	DOT, LBRACKET, RBRACKET;

/* assign operator */
terminal String	ASSIGN;

/* seperated operator */
terminal String	COMMA, SEMICOLON;

/* paratheses */
terminal String	LPARENTHESES, RPARENTHESES;

/* identifier */
terminal String		IDENTIFIER;

/* number */
terminal String	NUMBER;

/* Non terminals used in the grammar section.  */

   /* Non terminals that have an object value are listed first and then
   non terminals that have an integer value are listed.  An object
   value means that it can be any type, it isn't set to a specific
   type.  So it could be an Integer or a String or whatever. */

non terminal String	program, module, module_begin;
non terminal String	statement_sequence, statement, assignment, procedure_call, if_statement, elsif_statement, else_statement, while_statement;
non terminal String	declarations, const_declaration, const_list, type_declaration, type_list, var_declaration, var_list, var_epsilon;
non terminal String	procedure_declaration, procedure_heading, procedure_body, procedure_begin;

non terminal String	formal_parameters, fp_section_list, fp_section, actual_parameters, expression_list;

non terminal String	expression, simple_expression, term, factor, expression_operator, simple_expression_operator, signed_operator, term_operator;

non terminal String	type, array_type, record_type;

non terminal String	field_lists, field_list, identifier_list;

non terminal String	selector;

/* -------------Precedence and Associatively of Terminals Section----------- */
precedence right	ASSIGN;
precedence left		OR, AND;
precedence right	NOT;
precedence left		EQUAL, UNEQUAL, LESS, LESS_EQUAL, GREAT, GREAT_EQUAL;
precedence left		PLUS, MINUS;
precedence left		TIMES, DIVIDE, MOD;
precedence left 	LPARENTHESES;


/* ----------------------------Grammar Section-------------------- */
/* The grammar for our parser. */


program ::= module:m
	{:
		System.out.println("Congratulation!!! There is no error in your program.");
		System.out.println("Drawing Flowchart, please wait...");
		main_Module.show();
	:};

module ::=	MODULE:m IDENTIFIER: identifier_1 SEMICOLON
			declarations
		module_begin
		END IDENTIFIER: identifier_2 DOT
		{:
			
		:};

module_begin ::=	BEGIN statement_sequence
			{:
			
			:}
			| /*epsilon*/
			{:
				RESULT = "";
			:};


declarations ::=	const_declaration: c_d
			type_declaration: t_d
			var_declaration: v_d
			procedure_declaration: p_d
			{:
				/* 
				因为不绘制模块中的东西，所以以状态栈int_stack中是否有值为标志，查看当前的流程图绘制对象的范围。
				状态栈中不为空，则表示当前流程图绘制范围在函数中，目前的declaration可以添加到流程图中，如果为空，则标志
				当前对象绘制范围为模块module。
				*/
				if(!int_stack.empty())
				{
					String str_declarations = "";
					if(c_d != null && c_d.length() > 0)
					{
						str_declarations = str_declarations + " " + c_d + "<br>";
					}
					if(t_d != null && t_d.length() > 0)
					{
						str_declarations = str_declarations + " " + t_d + "<br>";
					}
					if(v_d != null && v_d.length() > 0)
					{
						str_declarations = str_declarations + " " + v_d + "<br>";
					}
					if(p_d != null && p_d.length() > 0)
					{
						str_declarations = str_declarations + " " + p_d + "<br>";
					}
					// add the declarations to the flowchart
					if(!str_declarations.equals(""))
					{
						procedure.add(new PrimitiveStatement(str_declarations));
					}
				}

			:};

const_declaration ::=	CONST:c const_list: c_l
			{:
				RESULT = c + " " + c_l;
			:}
			| /*epsilon*/
			{:
				RESULT = "";
			:};

const_list ::=		const_list: c_l IDENTIFIER:identifier EQUAL: equal expression: e SEMICOLON: semicolon
			{:
				RESULT = c_l + " " + identifier + " " + equal + " " + e + semicolon;
			:}
			| /*empty*/
			{:
				RESULT = "";
			:};

type_declaration ::=	TYPE:t type_list : t_l
			{:
				RESULT = t + " " + t_l;
			:}
			| /*eplison*/
			{:
				RESULT = "";
			:};

type_list ::=		type_list:t_l IDENTIFIER:identifier EQUAL: equal type: t SEMICOLON: semicolon
			{:
				RESULT = t_l + " " + identifier + " " + equal + " " + t + semicolon;
			:}
			| /*eplison*/
			{:
				RESULT = "";
			:};

var_declaration ::=	VAR:var var_list: v_l
			{:
				RESULT = var + " " + v_l;
			:}
			| /*empty*/
			{:
				RESULT = "";
			:};

var_list ::=		var_list: v_l identifier_list: id_list COLON: colon type: t SEMICOLON: semicolon
			{:
				RESULT = v_l + " " + id_list + " " + colon + " " + t + semicolon;
			:}
			| /*epsilon*/
			{:
				RESULT = "";
			:};

identifier_list ::=	identifier_list: id_list COMMA: comma IDENTIFIER: identifier
			{:
				RESULT = id_list + comma + " " + identifier;
			:}
			| IDENTIFIER: identifier
			{:
				RESULT = identifier;
			:};

procedure_declaration ::=	procedure_declaration procedure_heading: head_name SEMICOLON 
				procedure_body: tail_name SEMICOLON
				{:
					if(!head_name.equals(tail_name))
					{
						throw new ProcedureNameMismatchedException();
					}
				:}
				| /*epsilon*/
				{:
					RESULT = "";
				:};

procedure_heading ::=	PROCEDURE IDENTIFIER: identifier formal_parameters: fp
			{:
				// 流程图的从这里开始，向int_stack中压入0，表示当前的流程图位置是函数
				int_stack.push(new Integer(0));
				procedure = main_Module.add(identifier);
				// 返回头部函数名，以便检查函数名是否匹配
				RESULT = identifier;
			:};

formal_parameters ::=	LPARENTHESES fp_section_list: fp_s_l RPARENTHESES
			{:
				RESULT = "(" + " " + fp_s_l + " " + ")";
			:}
			| LPARENTHESES RPARENTHESES
			{:
				RESULT = "(" + ")";
			:}
			| /*epsilon*/
			{:
				RESULT = "";
			:};

fp_section_list ::=	fp_section_list: fp_s_l SEMICOLON: semicolon fp_section: fp_s
			{:
				RESULT = fp_s_l + semicolon + " " + fp_s;
			:}
			| fp_section: fp_s
			{:
				RESULT = fp_s;
			:};

fp_section ::=		var_epsilon: v_e identifier_list: id_list COLON: colon type: t
			{:
				RESULT = v_e + " " + id_list + " " + colon + " " + t;
			:};

var_epsilon ::=		VAR:var
			{:
				RESULT = var; 
			:}
			| /*eplison*/
			{:
				RESULT = "";
			:};

type ::=		IDENTIFIER: identifier
			{:
				RESULT = identifier ;	
			:}
			| INTEGER: i
			{:
				RESULT = i;
			:}
			| BOOLEAN: b
			{:
				RESULT = b;
			:}
			| array_type: a_t
			{:
				RESULT = a_t;
			:}
			| record_type: r_t
			{:
				RESULT = r_t;
			:};
array_type ::=		ARRAY: array expression OF type
			{:
				RESULT = array;
			:};

record_type ::=		RECORD: record
				field_lists
			END
			{:
				RESULT = record;
			:};

field_lists ::=		field_lists: f_ls SEMICOLON: semicolon field_list: f_l
			{:
				RESULT = f_ls + semicolon + " " + f_l;
			:}
			| field_list: f_l
			{:
				RESULT = f_l;
			:};

field_list ::=		identifier_list: id_list COLON: colon type: t
			{:
				RESULT = id_list + " " + colon + " " + t;
			:}
			| /*epsilon*/
			{:
				RESULT = "";
			:};

procedure_body ::=	declarations procedure_begin END IDENTIFIER: identifier
			{:
				/*
				函数结束，从状态栈int_stack中弹出栈顶，表示一个函数绘制结束，
				因此当一个函数的流程图绘制结束时，int_stack栈为空。
				*/
				int_stack.pop();
				// 返回尾部函数名，以便检查函数名是否匹配
				RESULT = identifier;
			:};

procedure_begin ::=	BEGIN statement_sequence 
			| /*empty*/
			{:
				RESULT = "";
			:};

				
statement_sequence ::=	statement_sequence: s_s SEMICOLON: semicolon statement: s 
			{:
				RESULT = s_s + semicolon + " " + s;
			:}
			| statement: s
			{:
				RESULT = s;
			:};

statement ::=		assignment: a
			{:
				/* 
				判断int_stack是否为空，是为了判断函数绘制位置是在procedure范围内，还是在module范围内，
				int_stack为空则是在module范围内，int_stack不为空则是在precedure范围内。
				*/
				if(!int_stack.empty())
				{	
					// 判断当前的绘制流程图的状态，然后向当前绘制流程图的对象中添加语句
					if(int_stack.peek() == 0)
					{
						procedure.add(new PrimitiveStatement(a));
					}
					else if(int_stack.peek() == 1 )
					{
						while_stack.peek().getLoopBody().add(new PrimitiveStatement(a));
					}
					else if(int_stack.peek() == 2 )
					{	
						if_stack.peek().getTrueBody().add(new PrimitiveStatement(a));
					}
					else
					{	
						if_stack.peek().getFalseBody().add(new PrimitiveStatement(a));
					}
				}
				
			:}
			| procedure_call: p_c
			{:
				/* 
				判断int_stack是否为空，是为了判断函数绘制位置是在procedure范围内，还是在module范围内，
				int_stack为空则是在module范围内，int_stack不为空则是在precedure范围内。
				*/
				if(!int_stack.empty())
				{
					// 判断当前的绘制流程图的状态，然后向当前绘制流程图的对象中添加语句
					if(int_stack.peek() == 0)
					{
						procedure.add(new PrimitiveStatement(p_c));
					}
					else if(int_stack.peek() == 1 )
					{
						while_stack.peek().getLoopBody().add(new PrimitiveStatement(p_c));
					}
					else if(int_stack.peek() == 2 )
					{	
						if_stack.peek().getTrueBody().add(new PrimitiveStatement(p_c));
					}
					else
					{	
						if_stack.peek().getFalseBody().add(new PrimitiveStatement(p_c));
					}
				}
			:}
			| if_statement
			| while_statement
			| /*epsilon*/
			{:
				RESULT = "";
			:};

while_statement ::=	WHILE expression: e DO
			{:	
				/*
				绘制while循环中的流程图
				*/
				// 声明一个while循环流程图的对象
				WhileStatement wstmt = new WhileStatement(e);
				// 判断当前是否在procedure中
				if(!int_stack.empty())
				{
					// 判断当前的绘制流程图的状态，然后向当前绘制流程图的对象中添加while循环流程图绘制对象
					if(int_stack.peek() == 0)
					{
						procedure.add(wstmt);
					}
					else if(int_stack.peek() == 1)
					{
						while_stack.peek().getLoopBody().add(wstmt);
					}
					else if(int_stack.peek() == 2)
					{	
						if_stack.peek().getTrueBody().add(wstmt);
					}
					else
					{	
						if_stack.peek().getFalseBody().add(wstmt);
					}
				}
				// 向栈中push一个整数1，表示现在的流程图绘制对象转换为while流程图绘制对象
				int_stack.push(new Integer(1));
				// 向栈中添加对象while循环的流程图绘制对象
				while_stack.push(wstmt);
			:}
				statement_sequence
			END
			{:
				// while 循环结束弹出状态标志
				int_stack.pop();
				// while 循环结束弹出while循环流程图绘制对象
				while_stack.pop();
			:};

if_statement ::=	IF expression: e THEN 
			{:
				/*
				绘制if条件语句的流程图
				*/
				// 声明一个if条件语句流程图的对象
				IfStatement ifstmt = new IfStatement(e);
				// 判断当前是否在procedure中
				if(!int_stack.empty())
				{
					// 判断当前的绘制流程图的状态，然后向当前绘制流程图的对象中添加if条件流程图绘制对象
					if(int_stack.peek() == 0)
					{
						procedure.add(ifstmt);
					}
					else if(int_stack.peek() == 1 )
					{
						while_stack.peek().getLoopBody().add(ifstmt);
					}
					else if(int_stack.peek() == 2 )
					{	
						if_stack.peek().getTrueBody().add(ifstmt);
					}
					else
					{	
						if_stack.peek().getFalseBody().add(ifstmt);
					}
				}
				// 向栈中push一个整数2，表示现在的流程图绘制对象转换为if流程图绘制对象
				int_stack.push(new Integer(2));
				// 向栈中添加if语句的流程图绘制对象
				if_stack.push(ifstmt);
			:}
				statement_sequence
			elsif_statement
			else_statement
			END
			{:
				// if语句结束弹出状态标志
				int_stack.pop();
				// if语句结束弹出if语句流程图绘制图像
				if_stack.pop();
			:};

elsif_statement ::=	elsif_statement
			ELSIF:elsif expression:e THEN
			{:
				/*
				绘制elsif条件语句的流程图
				*/
				// 声明一个if条件语句流程图的对象
				IfStatement ifstmt = new IfStatement(e);
				// 把if条件语句流程图对象添加到上一层if语句的false分支中
				if_stack.peek().getFalseBody().add(ifstmt);
				// 向栈中push一个整数2，表示现在的流程图绘制对象转换为if流程图绘制对象
				int_stack.push(new Integer(2));
				// 向栈中添加if语句的流程图绘制对象
				if_stack.push(ifstmt);
			:}
				statement_sequence
			{:
				// if语句结束弹出状态标志
				int_stack.pop();
				// if语句结束弹出if语句流程图绘制图像
				if_stack.pop();
				
			:}
			| /*epsilon*/
			{:
				RESULT = "";
			:};

else_statement ::=	ELSE:e 
			{:
				// 向状态栈int_stack中添加一个3，表示现在的流程图绘制状态应该添加到if语句的false分支
				int_stack.push(new Integer(3));
			:}
				statement_sequence: s_s
			{:
				// 弹出状态栈中的一个状态
				int_stack.pop();
			:}
			| /*epsilon*/
			{:
				RESULT = "";
			:};

procedure_call ::=	IDENTIFIER: identifier actual_parameters: a_p
			{:
				RESULT = identifier + a_p;
			:};
			
actual_parameters ::=	LPARENTHESES:lp expression_list:ex_l RPARENTHESES: rp
			{:
				RESULT = lp + " " + ex_l + " " + rp;
			:}
			| LPARENTHESES:lp RPARENTHESES:rp
			{:
				RESULT = "(" + ")";
			:}
			| /*epsilon*/
			{:
				RESULT = "";
			:};

expression_list ::=	expression_list: ex_l COMMA: comma expression: e
			{:
				RESULT = ex_l + " " + comma + " " + e;	
			:}
			| expression: e
			{:
				RESULT = e;
			:};

assignment ::=		IDENTIFIER:identifier selector: s ASSIGN: assign expression: e
			{:
				RESULT = identifier + s + " " + assign + " " + e;
			:};

expression ::=		simple_expression: s_e_1 expression_operator: e_o simple_expression: s_e_2
			{:
				RESULT = s_e_1  + " " + e_o  + " " + s_e_2 ;
			:}
			| simple_expression: s_e
			{:
				RESULT = s_e ;
			:}
			| expression_operator simple_expression
			{:
				if (true) throw new MissingOperandException();
			:}
			| simple_expression expression_operator
			{:
				if (true) throw new MissingOperandException();
			:};

expression_operator ::=	EQUAL: equal 
			{:
				RESULT = equal ;
			:}
			| UNEQUAL: unequal
			{:
				RESULT = unequal ;
			:} 
			| LESS: less
			{:
				// "&lt"表示小于号<,直接些"<"在流程图中无法显示
				RESULT = "&lt" ;
			:}
			| LESS_EQUAL: less_equal
			{:
				RESULT = less_equal ;
			:}
			| GREAT: great
			{:
				RESULT = "&gt" ;
			:}
			| GREAT_EQUAL:great_less
			{:
				RESULT = great_less ;
			:};

simple_expression ::=	simple_expression: s_e simple_expression_operator: s_e_o term: t
			{:
				RESULT = s_e  + " " + s_e_o  + " " + t ;
			:}
			| signed_operator: s_o term: t
			{:
				RESULT = s_o + t ;
			:}
			| OR term
			{:
				if(true) throw new MissingOperandException();
			:};
			
signed_operator ::=	PLUS: plus
			{:
				RESULT = plus ;
			:}
			| MINUS: minus
			{:
				RESULT = minus ;
			:}
			| /*epsilon*/
			{:
				RESULT = "";
			:};

simple_expression_operator ::=	PLUS: plus
				{:
					RESULT = plus ;
				:}	
				| MINUS: minus
				{:
					RESULT = minus ;
				:}
				| OR: or
				{:
					RESULT = or ;
				:};

term ::=		term: t term_operator: t_o factor: f
			{:
				RESULT = t  + " " + t_o  + " " + f ;
			:}
			| factor: f
			{:
				RESULT = f ;
				/*System.out.println(RESULT);*/
			:}
			| term_operator factor
			{:
				if(true) throw new MissingOperandException(); 
			:}
			| term factor
			{:
				if(true) throw new MissingOperatorException();
			:};

term_operator ::=	TIMES: times
			{:
				RESULT = times ;
			:}
			| DIVIDE: divides
			{:
				RESULT = divides ;
			:}
			| MOD: mod
			{:
				RESULT = mod ;
			:}
			| AND: and
			{:
				RESULT = and ;
			:};

factor ::=		IDENTIFIER: identifier selector: s
			{:
				RESULT = identifier  + s ;
			:}
			| NUMBER: number
			{:
				RESULT = number ;
				/*System.out.println(RESULT);*/
			:}
			| LPARENTHESES: lparen expression: e RPARENTHESES: rparen
			{:
				RESULT = lparen  + e  + rparen ;
			:}
			| NOT: not factor: f
			{:
				RESULT = not  + f ;
			:};


selector ::=		selector: s DOT: dot IDENTIFIER: identifier
			{:
				RESULT = s  + dot  + identifier ;
			:}
			| selector:s LBRACKET: lbracket expression: e RBRACKET: rbracket
			{:
				RESULT = s + lbracket + e + rbracket ;
			:}
			| /*epsilon*/
			{:
				RESULT = "";
			:};

