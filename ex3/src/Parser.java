
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import exceptions.*;
import callgraph.*;
import flowchart.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\003\000\002\002\004\000\002\003" +
    "\012\000\002\004\004\000\002\004\002\000\002\015\006" +
    "\000\002\016\004\000\002\016\002\000\002\017\007\000" +
    "\002\017\002\000\002\020\004\000\002\020\002\000\002" +
    "\021\007\000\002\021\002\000\002\022\004\000\002\022" +
    "\002\000\002\023\007\000\002\023\002\000\002\052\005" +
    "\000\002\052\003\000\002\024\007\000\002\024\002\000" +
    "\002\025\005\000\002\030\005\000\002\030\004\000\002" +
    "\030\002\000\002\031\005\000\002\031\003\000\002\032" +
    "\006\000\002\054\003\000\002\054\002\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\046\006\000\002\047\005\000\002" +
    "\050\005\000\002\050\003\000\002\051\005\000\002\051" +
    "\002\000\002\026\006\000\002\027\004\000\002\027\002" +
    "\000\002\005\005\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\002\000\002\014\007\000\002\011\011\000\002\012" +
    "\007\000\002\012\002\000\002\013\004\000\002\013\002" +
    "\000\002\010\004\000\002\033\005\000\002\033\004\000" +
    "\002\033\002\000\002\034\005\000\002\034\003\000\002" +
    "\007\006\000\002\035\005\000\002\035\003\000\002\035" +
    "\004\000\002\035\004\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\036\005\000\002\036\004\000\002" +
    "\036\004\000\002\043\003\000\002\043\003\000\002\043" +
    "\002\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\037\005\000\002\037\003\000\002\037\004\000" +
    "\002\037\004\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\040\004\000\002\040" +
    "\003\000\002\040\005\000\002\040\004\000\002\053\005" +
    "\000\002\053\006\000\002\053\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\004\005\001\002\000\004\002\246\001" +
    "\002\000\004\055\007\001\002\000\004\002\001\001\002" +
    "\000\004\052\010\001\002\000\016\005\ufffa\006\011\007" +
    "\ufffa\010\ufffa\022\ufffa\023\ufffa\001\002\000\016\005\ufff8" +
    "\007\ufff8\010\ufff8\022\ufff8\023\ufff8\055\ufff8\001\002\000" +
    "\014\005\ufff6\007\145\010\ufff6\022\ufff6\023\ufff6\001\002" +
    "\000\006\022\014\023\ufffd\001\002\000\014\014\021\016" +
    "\023\023\uffce\052\uffce\055\025\001\002\000\004\023\016" +
    "\001\002\000\004\055\017\001\002\000\004\045\020\001" +
    "\002\000\004\002\uffff\001\002\000\044\026\054\027\uffb1" +
    "\030\uffb1\031\042\032\044\033\051\034\046\035\040\036" +
    "\041\037\043\040\037\041\uffb1\042\uffb1\043\uffb1\053\uffb1" +
    "\055\uffb1\056\uffb1\001\002\000\012\020\uffd2\021\uffd2\023" +
    "\uffd2\052\uffd2\001\002\000\044\026\054\027\uffb1\030\uffb1" +
    "\031\042\032\044\033\051\034\046\035\040\036\041\037" +
    "\043\040\037\041\uffb1\042\uffb1\043\uffb1\053\uffb1\055\uffb1" +
    "\056\uffb1\001\002\000\012\020\uffd3\021\uffd3\023\uffd3\052" +
    "\uffd3\001\002\000\022\020\uffc4\021\uffc4\023\uffc4\045\uff9f" +
    "\046\uff9f\050\uff9f\052\uffc4\053\036\001\002\000\012\020" +
    "\uffd1\021\uffd1\023\uffd1\052\uffd1\001\002\000\012\020\uffcf" +
    "\021\uffcf\023\uffcf\052\uffcf\001\002\000\012\020\uffd0\021" +
    "\uffd0\023\uffd0\052\uffd0\001\002\000\006\023\ufffe\052\032" +
    "\001\002\000\020\014\021\016\023\020\uffce\021\uffce\023" +
    "\uffce\052\uffce\055\025\001\002\000\012\020\uffd4\021\uffd4" +
    "\023\uffd4\052\uffd4\001\002\000\010\045\100\046\077\050" +
    "\122\001\002\000\012\020\uffc7\021\uffc7\023\uffc7\052\uffc7" +
    "\001\002\000\046\026\054\027\uffb1\030\uffb1\031\042\032" +
    "\044\033\051\034\046\035\040\036\041\037\043\040\037" +
    "\041\uffb1\042\uffb1\043\uffb1\053\uffb1\054\052\055\uffb1\056" +
    "\uffb1\001\002\000\022\027\uffb2\030\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\053\uffb2\055\uffb2\056\uffb2\001\002\000\054\013" +
    "\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\023\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\001\002\000\054\013\uffb7\015\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\023\uffb7\026\uffb7\027\uffb7\030\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\047\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002\000\054" +
    "\013\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\001\002\000\022\027\uffb3\030\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\053\uffb3\055\uffb3\056\uffb3\001\002\000" +
    "\054\013\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\001\002\000\006\051\uffc2\054\uffc2\001" +
    "\002\000\054\013\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\023\uffb9\026\uffb9\027\uffb9\030\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\001\002\000\050\013\uffbf\015" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\026\115\031\042" +
    "\032\044\033\051\034\046\035\040\036\041\037\113\040" +
    "\114\047\uffbf\051\uffbf\052\uffbf\054\uffbf\001\002\000\022" +
    "\027\061\030\072\041\071\042\062\043\063\053\066\055" +
    "\070\056\064\001\002\000\054\013\uffba\015\uffba\017\uffba" +
    "\020\uffba\021\uffba\023\uffba\026\uffba\027\uffba\030\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\047\uffba\051\uffba" +
    "\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\001\002\000" +
    "\012\020\uffc5\021\uffc5\023\uffc5\052\uffc5\001\002\000\030" +
    "\026\054\027\uffb1\030\uffb1\037\043\040\037\041\uffb1\042" +
    "\uffb1\043\uffb1\053\uffb1\055\uffb1\056\uffb1\001\002\000\022" +
    "\027\061\030\072\041\071\042\062\043\063\053\066\055" +
    "\070\056\064\001\002\000\006\051\056\054\057\001\002" +
    "\000\044\026\054\027\uffb1\030\uffb1\031\042\032\044\033" +
    "\051\034\046\035\040\036\041\037\043\040\037\041\uffb1" +
    "\042\uffb1\043\uffb1\053\uffb1\055\uffb1\056\uffb1\001\002\000" +
    "\012\020\uffc6\021\uffc6\023\uffc6\052\uffc6\001\002\000\006" +
    "\051\uffc3\054\uffc3\001\002\000\012\030\uffa6\053\uffa6\055" +
    "\uffa6\056\uffa6\001\002\000\012\030\uffa8\053\uffa8\055\uffa8" +
    "\056\uffa8\001\002\000\012\030\uffa7\053\uffa7\055\uffa7\056" +
    "\uffa7\001\002\000\070\013\uffa4\015\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\023\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\047\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\001\002\000\070\013\uffb4" +
    "\015\uffb4\017\uffb4\020\uffb4\021\uffb4\023\uffb4\026\uffb4\027" +
    "\061\030\072\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\071\042\062\043\063\047" +
    "\uffb4\051\uffb4\052\uffb4\053\066\054\uffb4\055\070\056\064" +
    "\001\002\000\044\026\054\027\uffb1\030\uffb1\031\042\032" +
    "\044\033\051\034\046\035\040\036\041\037\043\040\037" +
    "\041\uffb1\042\uffb1\043\uffb1\053\uffb1\055\uffb1\056\uffb1\001" +
    "\002\000\070\013\uffac\015\uffac\017\uffac\020\uffac\021\uffac" +
    "\023\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\047\uffac\051\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\001\002\000\074\013\uff9f\015\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\023\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\001\002\000\012\030\uffa9\053\uffa9\055\uffa9\056" +
    "\uffa9\001\002\000\012\030\072\053\066\055\070\056\064" +
    "\001\002\000\012\030\072\053\066\055\070\056\064\001" +
    "\002\000\070\013\uffab\015\uffab\017\uffab\020\uffab\021\uffab" +
    "\023\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\043\uffab\047\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\001\002\000\070\013\uffa2\015\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\023\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\047\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\001\002" +
    "\000\074\013\uffa5\015\uffa5\017\uffa5\020\uffa5\021\uffa5\023" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\045\100\046\077\047\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\056\uffa5\001\002\000\044\026" +
    "\054\027\uffb1\030\uffb1\031\042\032\044\033\051\034\046" +
    "\035\040\036\041\037\043\040\037\041\uffb1\042\uffb1\043" +
    "\uffb1\053\uffb1\055\uffb1\056\uffb1\001\002\000\004\055\101" +
    "\001\002\000\076\013\uffa1\015\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\023\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\001" +
    "\002\000\004\047\103\001\002\000\076\013\uffa0\015\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\023\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\045\uffa0\046" +
    "\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\001\002\000\004\054\105\001\002\000" +
    "\070\013\uffa3\015\uffa3\017\uffa3\020\uffa3\021\uffa3\023\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\001\002\000\070\013\uffaa\015\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\023\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\047\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\001\002\000\012" +
    "\030\072\053\066\055\070\056\064\001\002\000\070\013" +
    "\uffad\015\uffad\017\uffad\020\uffad\021\uffad\023\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\047\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\001\002\000\034\013\uffbe\015\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\023\uffbe\026\115\037\113\040\114\047\uffbe\051" +
    "\uffbe\052\uffbe\054\uffbe\001\002\000\022\027\061\030\072" +
    "\041\071\042\062\043\063\053\066\055\070\056\064\001" +
    "\002\000\022\027\uffb0\030\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\053\uffb0\055\uffb0\056\uffb0\001\002\000\022\027\uffaf\030" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\053\uffaf\055\uffaf\056\uffaf" +
    "\001\002\000\022\027\uffae\030\uffae\041\uffae\042\uffae\043" +
    "\uffae\053\uffae\055\uffae\056\uffae\001\002\000\070\013\uffb6" +
    "\015\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\026\uffb6\027" +
    "\061\030\072\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\071\042\062\043\063\047" +
    "\uffb6\051\uffb6\052\uffb6\053\066\054\uffb6\055\070\056\064" +
    "\001\002\000\070\013\uffb5\015\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\023\uffb5\026\uffb5\027\061\030\072\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\071\042\062\043\063\047\uffb5\051\uffb5\052\uffb5\053\066" +
    "\054\uffb5\055\070\056\064\001\002\000\054\013\uffbd\015" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd\026\054\027\uffb1" +
    "\030\uffb1\037\043\040\037\041\uffb1\042\uffb1\043\uffb1\047" +
    "\uffbd\051\uffbd\052\uffbd\053\uffb1\054\uffbd\055\uffb1\056\uffb1" +
    "\001\002\000\034\013\uffc0\015\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\023\uffc0\026\115\037\113\040\114\047\uffc0\051\uffc0" +
    "\052\uffc0\054\uffc0\001\002\000\044\026\054\027\uffb1\030" +
    "\uffb1\031\042\032\044\033\051\034\046\035\040\036\041" +
    "\037\043\040\037\041\uffb1\042\uffb1\043\uffb1\053\uffb1\055" +
    "\uffb1\056\uffb1\001\002\000\012\020\uffc1\021\uffc1\023\uffc1" +
    "\052\uffc1\001\002\000\004\017\125\001\002\000\020\014" +
    "\021\016\023\020\uffce\021\uffce\023\uffce\052\uffce\055\025" +
    "\001\002\000\012\020\uffca\021\uffca\023\uffca\052\032\001" +
    "\002\000\010\020\131\021\130\023\uffc8\001\002\000\014" +
    "\014\021\016\023\023\uffce\052\uffce\055\025\001\002\000" +
    "\044\026\054\027\uffb1\030\uffb1\031\042\032\044\033\051" +
    "\034\046\035\040\036\041\037\043\040\037\041\uffb1\042" +
    "\uffb1\043\uffb1\053\uffb1\055\uffb1\056\uffb1\001\002\000\004" +
    "\023\133\001\002\000\012\020\uffcc\021\uffcc\023\uffcc\052" +
    "\uffcc\001\002\000\004\017\135\001\002\000\020\014\021" +
    "\016\023\020\uffce\021\uffce\023\uffce\052\uffce\055\025\001" +
    "\002\000\012\020\uffcb\021\uffcb\023\uffcb\052\032\001\002" +
    "\000\006\023\uffc9\052\032\001\002\000\004\015\141\001" +
    "\002\000\014\014\021\016\023\023\uffce\052\uffce\055\025" +
    "\001\002\000\006\023\143\052\032\001\002\000\012\020" +
    "\uffcd\021\uffcd\023\uffcd\052\uffcd\001\002\000\012\005\ufff2" +
    "\010\200\022\ufff2\023\ufff2\001\002\000\014\005\ufff4\010" +
    "\ufff4\022\ufff4\023\ufff4\055\ufff4\001\002\000\014\005\ufff7" +
    "\010\ufff7\022\ufff7\023\ufff7\055\147\001\002\000\004\031" +
    "\150\001\002\000\014\011\151\012\160\024\152\025\157" +
    "\055\154\001\002\000\010\023\uffd8\052\uffd8\055\166\001" +
    "\002\000\010\023\uffe1\052\uffe1\054\uffe1\001\002\000\004" +
    "\052\164\001\002\000\010\023\uffe2\052\uffe2\054\uffe2\001" +
    "\002\000\010\023\uffdf\052\uffdf\054\uffdf\001\002\000\010" +
    "\023\uffde\052\uffde\054\uffde\001\002\000\010\023\uffe0\052" +
    "\uffe0\054\uffe0\001\002\000\044\026\054\027\uffb1\030\uffb1" +
    "\031\042\032\044\033\051\034\046\035\040\036\041\037" +
    "\043\040\037\041\uffb1\042\uffb1\043\uffb1\053\uffb1\055\uffb1" +
    "\056\uffb1\001\002\000\004\013\162\001\002\000\014\011" +
    "\151\012\160\024\152\025\157\055\154\001\002\000\010" +
    "\023\uffdd\052\uffdd\054\uffdd\001\002\000\014\005\ufff5\010" +
    "\ufff5\022\ufff5\023\ufff5\055\ufff5\001\002\000\006\044\175" +
    "\051\174\001\002\000\006\044\uffee\051\uffee\001\002\000" +
    "\006\023\uffda\052\uffda\001\002\000\006\023\172\052\171" +
    "\001\002\000\010\023\uffd8\052\uffd8\055\166\001\002\000" +
    "\010\023\uffdc\052\uffdc\054\uffdc\001\002\000\006\023\uffdb" +
    "\052\uffdb\001\002\000\004\055\177\001\002\000\014\011" +
    "\151\012\160\024\152\025\157\055\154\001\002\000\006" +
    "\023\uffd9\052\uffd9\001\002\000\006\044\uffef\051\uffef\001" +
    "\002\000\012\005\ufff0\022\ufff0\023\ufff0\055\ufff0\001\002" +
    "\000\010\005\uffec\022\uffec\023\uffec\001\002\000\010\005" +
    "\203\022\ufffc\023\ufffc\001\002\000\004\055\216\001\002" +
    "\000\004\052\205\001\002\000\016\005\ufffa\006\011\007" +
    "\ufffa\010\ufffa\022\ufffa\023\ufffa\001\002\000\006\022\212" +
    "\023\uffd5\001\002\000\004\052\210\001\002\000\010\005" +
    "\uffed\022\uffed\023\uffed\001\002\000\004\023\214\001\002" +
    "\000\014\014\021\016\023\023\uffce\052\uffce\055\025\001" +
    "\002\000\006\023\uffd6\052\032\001\002\000\004\055\215" +
    "\001\002\000\004\052\uffd7\001\002\000\006\052\uffe8\053" +
    "\220\001\002\000\004\052\uffeb\001\002\000\010\010\221" +
    "\054\222\055\uffe3\001\002\000\004\055\uffe4\001\002\000" +
    "\004\052\uffe9\001\002\000\006\052\uffe6\054\uffe6\001\002" +
    "\000\006\052\232\054\231\001\002\000\004\055\166\001" +
    "\002\000\006\044\227\051\174\001\002\000\014\011\151" +
    "\012\160\024\152\025\157\055\154\001\002\000\006\052" +
    "\uffe5\054\uffe5\001\002\000\004\052\uffea\001\002\000\006" +
    "\010\221\055\uffe3\001\002\000\006\052\uffe7\054\uffe7\001" +
    "\002\000\012\005\ufff3\022\ufff3\023\ufff3\055\166\001\002" +
    "\000\006\044\236\051\174\001\002\000\014\011\151\012" +
    "\160\024\152\025\157\055\154\001\002\000\004\052\240" +
    "\001\002\000\012\005\ufff1\022\ufff1\023\ufff1\055\ufff1\001" +
    "\002\000\016\005\ufffb\007\ufffb\010\ufffb\022\ufffb\023\ufffb" +
    "\055\242\001\002\000\004\031\243\001\002\000\044\026" +
    "\054\027\uffb1\030\uffb1\031\042\032\044\033\051\034\046" +
    "\035\040\036\041\037\043\040\037\041\uffb1\042\uffb1\043" +
    "\uffb1\053\uffb1\055\uffb1\056\uffb1\001\002\000\004\052\245" +
    "\001\002\000\016\005\ufff9\007\ufff9\010\ufff9\022\ufff9\023" +
    "\ufff9\055\ufff9\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\012\016\011\001\001\000\004\017\240\001" +
    "\001\000\004\020\143\001\001\000\004\004\014\001\001" +
    "\000\016\005\030\006\023\007\021\010\025\011\027\014" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\035\137\036\046\041" +
    "\052\043\047\001\001\000\002\001\001\000\012\035\123" +
    "\036\046\041\052\043\047\001\001\000\002\001\001\000" +
    "\006\033\034\053\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\032\007\021\010\025\011\027\014\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\034" +
    "\054\035\044\036\046\041\052\043\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\117\042\111\001\001\000" +
    "\010\037\116\040\066\044\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\110\043\047\001\001\000" +
    "\010\037\064\040\066\044\072\001\001\000\002\001\001" +
    "\000\012\035\057\036\046\041\052\043\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\105\044\106\001\001\000\012\035\103\036\046\041\052" +
    "\043\047\001\001\000\002\001\001\000\004\053\075\001" +
    "\001\000\002\001\001\000\004\040\074\001\001\000\004" +
    "\040\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\101\036\046\041\052\043\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\107\001\001\000\002\001" +
    "\001\000\004\042\111\001\001\000\010\037\115\040\066" +
    "\044\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\105\044\106\001\001\000\006" +
    "\040\105\044\106\001\001\000\006\036\120\043\047\001" +
    "\001\000\004\042\111\001\001\000\012\035\122\036\046" +
    "\041\052\043\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\125\006\023\007\021\010\025\011\027" +
    "\014\026\001\001\000\004\012\126\001\001\000\004\013" +
    "\131\001\001\000\016\005\136\006\023\007\021\010\025" +
    "\011\027\014\026\001\001\000\012\035\133\036\046\041" +
    "\052\043\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\135\006\023\007\021\010" +
    "\025\011\027\014\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\141\006\023\007" +
    "\021\010\025\011\027\014\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\200\001\001\000\004\021" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\045\152\046\154\047\155\001\001\000\010\050\167\051" +
    "\166\052\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\160\036\046\041\052\043\047" +
    "\001\001\000\002\001\001\000\010\045\162\046\154\047" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\172\052\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\045\175\046" +
    "\154\047\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\233\001\001\000\004\024\201\001\001\000" +
    "\004\025\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\205\016\011\026\206\001\001\000\004\027" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\212\006\023\007\021\010\025\011" +
    "\027\014\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\216\001\001\000\002\001" +
    "\001\000\010\031\223\032\222\054\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\225\001\001\000\002\001\001\000\010" +
    "\045\227\046\154\047\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\232\054\224\001\001\000\002" +
    "\001\001\000\004\052\234\001\001\000\002\001\001\000" +
    "\010\045\236\046\154\047\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\035\243\036\046\041\052\043\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	graph = new CallGraph();
	main_Module = new Module("Oberon-0 FlowChart");

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	public HashMap<String, Integer> Identifier_Value_HashMap = new HashMap();
	public HashMap<String, Integer> New_type_name = new HashMap();
	public HashMap<String, Integer> Indetifier_Type_HashMap = new HashMap();
	public HashMap<String, ArrayList<Integer>> Array_HashMap = new HashMap();

	public CallGraph graph;
	
	Module main_Module;
	Procedure procedure;




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= module 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		System.out.println("Congratulation!!!");
		Procedure proc = main_Module.add("test_1");
		proc.add(new PrimitiveStatement("Yous_test_1"));
		main_Module.show();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= MODULE IDENTIFIER SEMICOLON declarations module_begin END IDENTIFIER DOT 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int identifier_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int identifier_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String identifier_1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int identifier_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identifier_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String identifier_2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module_begin ::= BEGIN statement_sequence 
            {
              String RESULT =null;
		
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_begin",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // module_begin ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_begin",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= const_declaration type_declaration var_declaration procedure_declaration 
            {
              String RESULT =null;
		int c_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int c_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c_d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int c_tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c_tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c_t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v_d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p_d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				procedure.add(new PrimitiveStatement(c_d + "\n" + c_t + "\n" + v_d + "\n" + p_d +"\n"));
				//RESULT = c_d + c_t + v_d + p_d;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_declaration ::= CONST const_list 
            {
              String RESULT =null;
		int c_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = "const" + c_l;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_declaration ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_list ::= const_list IDENTIFIER EQUAL expression SEMICOLON 
            {
              String RESULT =null;
		int c_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int c_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String c_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int equalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int equalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String equal = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String semicolon = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = c_l + identifier + equal + e + semicolon;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_list ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declaration ::= TYPE type_list 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = t + t_l;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_declaration ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_list ::= type_list IDENTIFIER EQUAL type SEMICOLON 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int equalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int equalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String equal = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String semicolon = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = t_l + identifier + equal + t + semicolon;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_list ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declaration ::= VAR var_list 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = var + v_l;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_declaration ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_list ::= var_list identifier_list COLON type SEMICOLON 
            {
              String RESULT =null;
		int v_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id_list = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String semicolon = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = v_l + id_list + t + semicolon;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_list ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              String RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_list = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String comma = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = id_list + comma + identifier;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // identifier_list ::= IDENTIFIER 
            {
              String RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = identifier;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_declaration ::= procedure_declaration procedure_heading SEMICOLON procedure_body SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_declaration ::= 
            {
              String RESULT =null;
		
					RESULT = "";
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_heading ::= PROCEDURE IDENTIFIER formal_parameters 
            {
              String RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				procedure = main_Module.add(identifier);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal_parameters ::= LPARENTHESES fp_section_list RPARENTHESES 
            {
              String RESULT =null;
		int fp_s_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fp_s_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String fp_s_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = "(" + fp_s_l + ")";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formal_parameters ::= LPARENTHESES RPARENTHESES 
            {
              String RESULT =null;
		
				RESULT = "(" + ")";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal_parameters ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fp_section_list ::= fp_section_list SEMICOLON fp_section 
            {
              String RESULT =null;
		int fp_s_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fp_s_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fp_s_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String semicolon = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fp_sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fp_sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fp_s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = fp_s_l + semicolon + fp_s;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fp_section_list ::= fp_section 
            {
              String RESULT =null;
		int fp_sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fp_sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fp_s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = fp_s;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fp_section ::= var_epsilon identifier_list COLON type 
            {
              String RESULT =null;
		int v_eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v_eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v_e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_list = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String colon = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = v_e + id_list + colon + t;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_epsilon ::= VAR 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = var; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_epsilon",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_epsilon ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_epsilon",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= IDENTIFIER 
            {
              String RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = identifier ;	
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= INTEGER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = i;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= BOOLEAN 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = b;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= array_type 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = t;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= record_type 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = t;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // array_type ::= ARRAY expression OF type 
            {
              String RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String array = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
				RESULT = array;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // record_type ::= RECORD field_lists END 
            {
              String RESULT =null;
		int recordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int recordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String record = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				RESULT = record;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // field_lists ::= field_lists SEMICOLON field_list 
            {
              String RESULT =null;
		int f_lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int f_lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String f_ls = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String semicolon = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = f_ls + semicolon + f_l;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_lists",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // field_lists ::= field_list 
            {
              String RESULT =null;
		int f_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = f_l;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_lists",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // field_list ::= identifier_list COLON type 
            {
              String RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_list = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String colon = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = id_list + colon + t;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field_list ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procedure_body ::= declarations procedure_begin END IDENTIFIER 
            {
              String RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procedure_begin ::= BEGIN statement_sequence 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_begin",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // procedure_begin ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_begin",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement_sequence ::= statement_sequence SEMICOLON statement 
            {
              String RESULT =null;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s_s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String semicolon = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = s_s + semicolon + s;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement_sequence ::= statement 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = s;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= assignment 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				procedure.add(new PrimitiveStatement(a));
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= procedure_call 
            {
              String RESULT =null;
		int p_cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p_cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p_c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				procedure.add(new PrimitiveStatement(p_c));
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= if_statement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= while_statement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // while_statement ::= WHILE expression DO statement_sequence END 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
					procedure.add(new PrimitiveStatement("WHILE Statement"));
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if_statement ::= IF expression THEN statement_sequence elsif_statement else_statement END 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
				procedure.add(new PrimitiveStatement("IF Statement"));
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elsif_statement ::= elsif_statement ELSIF expression THEN statement_sequence 
            {
              String RESULT =null;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String elsif = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // elsif_statement ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // else_statement ::= ELSE statement_sequence 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s_s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // else_statement ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // procedure_call ::= IDENTIFIER actual_parameters 
            {
              String RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int a_pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a_pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a_p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = identifier + a_p;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // actual_parameters ::= LPARENTHESES expression_list RPARENTHESES 
            {
              String RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String lp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ex_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ex_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = lp + ex_l + rp;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // actual_parameters ::= LPARENTHESES RPARENTHESES 
            {
              String RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String lp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = "(" + ")";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // actual_parameters ::= 
            {
              String RESULT =null;
		
				RESULT = "";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression_list ::= expression_list COMMA expression 
            {
              String RESULT =null;
		int ex_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ex_l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String comma = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = ex_l + comma + e;	
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression_list ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = e;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assignment ::= IDENTIFIER selector ASSIGN expression 
            {
              String RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String assign = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = identifier + s + assign + e;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= simple_expression expression_operator simple_expression 
            {
              String RESULT =null;
		int s_e_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s_e_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s_e_1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e_oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e_oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e_o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s_e_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s_e_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s_e_2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = s_e_1  + e_o  + s_e_2 ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= simple_expression 
            {
              String RESULT =null;
		int s_eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s_eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s_e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = s_e ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression_operator simple_expression 
            {
              String RESULT =null;
		
				if (true) throw new MissingOperandException();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= simple_expression expression_operator 
            {
              String RESULT =null;
		
				if (true) throw new MissingOperandException();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_operator ::= EQUAL 
            {
              String RESULT =null;
		int equalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int equalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String equal = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = equal ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_operator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_operator ::= UNEQUAL 
            {
              String RESULT =null;
		int unequalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int unequalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String unequal = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = unequal ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_operator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_operator ::= LESS 
            {
              String RESULT =null;
		int lessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String less = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = less ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_operator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression_operator ::= LESS_EQUAL 
            {
              String RESULT =null;
		int less_equalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int less_equalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String less_equal = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = less_equal ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_operator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression_operator ::= GREAT 
            {
              String RESULT =null;
		int greatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int greatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String great = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = great ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_operator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression_operator ::= GREAT_EQUAL 
            {
              String RESULT =null;
		int great_lessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int great_lessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String great_less = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = great_less ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_operator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_expression ::= simple_expression simple_expression_operator term 
            {
              String RESULT =null;
		int s_eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s_eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s_e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s_e_oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_e_oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s_e_o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = s_e  + s_e_o  + t ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_expression ::= signed_operator term 
            {
              String RESULT =null;
		int s_oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s_o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = s_o  + t ;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_expression ::= OR term 
            {
              String RESULT =null;
		
				if(true) throw new MissingOperandException();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // signed_operator ::= PLUS 
            {
              String RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String plus = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = plus ;
				/*System.out.println(RESULT);*/
				
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signed_operator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // signed_operator ::= MINUS 
            {
              String RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String minus = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = minus ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signed_operator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // signed_operator ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signed_operator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_expression_operator ::= PLUS 
            {
              String RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String plus = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = plus ;
					/*System.out.println(RESULT);*/
				
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_operator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_expression_operator ::= MINUS 
            {
              String RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String minus = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = minus ;
					/*System.out.println(RESULT);*/
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_operator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_expression_operator ::= OR 
            {
              String RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					/*RESULT = or ;*/
					/*System.out.println(RESULT);*/
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_operator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // term ::= term term_operator factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t_oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t_oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t_o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = t  + t_o  + f ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // term ::= factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = f ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // term ::= term_operator factor 
            {
              String RESULT =null;
		
				if(true) throw new MissingOperandException(); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // term ::= term factor 
            {
              String RESULT =null;
		
				if(true) throw new MissingOperatorException();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // term_operator ::= TIMES 
            {
              String RESULT =null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String times = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = times ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_operator",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // term_operator ::= DIVIDE 
            {
              String RESULT =null;
		int dividesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dividesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String divides = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = divides ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_operator",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // term_operator ::= MOD 
            {
              String RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = mod ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_operator",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // term_operator ::= AND 
            {
              String RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String and = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = and ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_operator",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= IDENTIFIER selector 
            {
              String RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = identifier  + s ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= NUMBER 
            {
              String RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String number = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = number ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= LPARENTHESES expression RPARENTHESES 
            {
              String RESULT =null;
		int lparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String lparen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rparen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = lparen  + e  + rparen ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= NOT factor 
            {
              String RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = not  + f ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // selector ::= selector DOT IDENTIFIER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String dot = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = s  + dot  + identifier ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // selector ::= selector LBRACKET expression RBRACKET 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lbracketleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lbracketright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String lbracket = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rbracketleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbracketright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rbracket = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = s + lbracket + e + rbracket ;
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // selector ::= 
            {
              String RESULT =null;
		
				RESULT = "";
				/*System.out.println(RESULT);*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
