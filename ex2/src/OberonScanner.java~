/* The following code was generated by JFlex 1.6.1 */

/* this is a oberon_0 lexical */
/*
author: you
date: 2018/06/22
*/
/* --------------------------Usercode Section------------------------ */
/* import java_cup.runtime.*; */

import java.io.*;
import exceptions.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/oberon.flex</tt>
 */
public class OberonScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\52\1\51\1\0\1\52\1\50\22\0\1\52\2\0\1\30"+
    "\2\0\1\26\1\0\1\37\1\40\1\33\1\32\1\36\1\32\1\35"+
    "\1\0\1\45\7\47\2\46\1\34\1\36\1\31\1\27\1\31\2\0"+
    "\1\17\1\24\1\11\1\3\1\6\1\20\1\25\1\22\1\44\2\42"+
    "\1\5\1\1\1\12\1\2\1\7\1\42\1\10\1\43\1\14\1\4"+
    "\1\16\1\21\1\42\1\15\1\42\1\35\1\0\1\35\1\0\1\41"+
    "\1\0\1\17\1\24\1\11\1\3\1\6\1\20\1\25\1\22\1\44"+
    "\2\42\1\5\1\1\1\12\1\2\1\7\1\42\1\10\1\43\1\14"+
    "\1\4\1\16\1\21\1\42\1\15\1\42\1\0\1\53\1\0\1\26"+
    "\261\0\2\23\115\0\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ufe90\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\14\1\1\0\1\1\1\2\2\3\1\4\1\5"+
    "\1\6\1\7\1\10\2\11\1\1\2\12\2\13\1\14"+
    "\2\0\1\1\1\2\1\15\1\0\13\1\1\0\1\15"+
    "\2\1\1\16\1\17\1\16\1\0\1\1\1\20\2\21"+
    "\1\12\1\21\3\5\1\0\7\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\2\21\1\0\3\1\1\0\2\1"+
    "\2\0\1\1\1\0\1\16\1\22\2\1\1\0\1\1"+
    "\1\22\2\1\1\0\1\16\1\0\1\1\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\54\0\54\0\u02c0\0\54\0\u02ec\0\u0318\0\54\0\54"+
    "\0\u0344\0\54\0\u0370\0\u039c\0\u03c8\0\u03f4\0\54\0\54"+
    "\0\u02ec\0\u0420\0\u044c\0\334\0\334\0\u0478\0\u04a4\0\u04d0"+
    "\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630"+
    "\0\u065c\0\u0688\0\54\0\u06b4\0\u06e0\0\54\0\54\0\u070c"+
    "\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c"+
    "\0\54\0\334\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974"+
    "\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4"+
    "\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34"+
    "\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94"+
    "\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4"+
    "\0\u0e70\0\u0f20\0\u0f4c\0\u0f78";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\10\1\11"+
    "\1\12\1\6\1\2\1\13\1\6\1\14\1\15\1\6"+
    "\1\16\1\6\1\17\1\20\1\6\1\21\2\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\2"+
    "\2\6\1\33\1\34\2\35\1\36\1\37\1\40\34\2"+
    "\1\41\3\2\1\42\15\2\1\6\1\43\10\6\1\2"+
    "\7\6\1\2\2\6\5\2\1\41\3\2\1\42\1\2"+
    "\7\6\5\2\7\6\1\44\2\6\1\2\4\6\1\45"+
    "\2\6\1\2\2\6\5\2\1\41\3\2\1\42\1\2"+
    "\7\6\5\2\1\6\1\45\10\6\1\2\7\6\1\46"+
    "\2\6\5\2\1\41\3\2\1\42\1\2\3\6\1\47"+
    "\3\6\5\2\12\6\1\2\7\6\1\2\2\6\5\2"+
    "\1\41\3\2\1\42\1\2\7\6\5\2\4\6\1\50"+
    "\4\6\1\51\1\2\7\6\1\2\2\6\5\2\1\41"+
    "\3\2\1\42\1\2\7\6\5\2\7\6\1\52\2\6"+
    "\1\2\7\6\1\2\2\6\5\2\1\41\3\2\1\42"+
    "\1\2\7\6\5\2\5\6\1\53\4\6\1\2\7\6"+
    "\1\2\2\6\5\2\1\41\3\2\1\42\1\2\7\6"+
    "\5\2\1\6\1\54\10\6\1\2\7\6\1\2\2\6"+
    "\5\2\1\41\3\2\1\42\1\2\7\6\5\2\12\6"+
    "\1\2\1\6\1\55\4\6\1\56\1\2\2\6\5\2"+
    "\1\41\3\2\1\42\1\2\7\6\5\2\12\6\1\2"+
    "\3\6\1\57\3\6\1\2\2\6\5\2\1\41\3\2"+
    "\1\42\1\2\7\6\5\2\7\6\1\60\2\6\1\2"+
    "\7\6\1\2\2\6\5\2\1\41\3\2\1\42\1\2"+
    "\7\6\5\2\12\6\1\2\6\6\1\61\1\2\2\6"+
    "\5\2\1\41\3\2\1\42\1\2\7\6\16\2\1\62"+
    "\5\2\1\63\12\2\1\41\3\2\1\42\15\2\1\6"+
    "\1\64\3\6\1\65\4\6\1\2\7\6\1\2\2\6"+
    "\5\2\1\41\3\2\1\42\1\2\7\6\33\2\1\22"+
    "\3\2\1\41\3\2\1\42\47\2\1\41\3\2\1\42"+
    "\1\66\42\2\1\67\3\2\1\41\3\2\1\42\47\2"+
    "\1\70\3\2\1\71\15\2\11\6\1\72\1\2\4\6"+
    "\1\45\2\6\1\2\2\6\5\2\1\41\3\2\1\42"+
    "\1\2\7\6\5\2\12\73\1\2\7\73\1\2\2\73"+
    "\5\2\1\41\3\2\1\42\2\2\3\73\1\74\1\75"+
    "\1\76\3\2\1\77\1\2\12\73\1\2\7\73\1\2"+
    "\2\73\5\2\1\41\3\2\1\42\2\2\3\73\3\35"+
    "\37\2\1\41\3\2\1\42\11\2\1\37\35\2\1\0"+
    "\3\2\1\71\15\2\2\6\1\100\7\6\1\2\7\6"+
    "\1\2\2\6\5\2\1\41\3\2\1\42\1\2\7\6"+
    "\22\2\1\101\14\2\1\41\3\2\1\42\15\2\12\6"+
    "\1\2\2\6\1\102\4\6\1\2\2\6\5\2\1\41"+
    "\3\2\1\42\1\2\7\6\5\2\12\6\1\103\7\6"+
    "\1\2\2\6\5\2\1\41\3\2\1\42\1\2\2\6"+
    "\1\104\4\6\5\2\2\6\1\45\7\6\1\2\7\6"+
    "\1\2\2\6\5\2\1\41\3\2\1\42\1\2\7\6"+
    "\5\2\1\6\1\105\10\6\1\2\7\6\1\2\2\6"+
    "\5\2\1\41\3\2\1\42\1\2\7\6\5\2\10\6"+
    "\1\106\1\6\1\2\7\6\1\2\2\6\5\2\1\41"+
    "\3\2\1\42\1\2\7\6\5\2\11\6\1\107\1\2"+
    "\7\6\1\2\2\6\5\2\1\41\3\2\1\42\1\2"+
    "\7\6\5\2\6\6\1\110\3\6\1\2\7\6\1\2"+
    "\2\6\5\2\1\41\3\2\1\42\1\2\7\6\5\2"+
    "\5\6\1\111\4\6\1\2\7\6\1\2\2\6\5\2"+
    "\1\41\3\2\1\42\1\2\7\6\5\2\7\6\1\45"+
    "\2\6\1\2\7\6\1\2\2\6\5\2\1\41\3\2"+
    "\1\42\1\2\7\6\5\2\7\6\1\112\2\6\1\2"+
    "\7\6\1\2\2\6\5\2\1\41\3\2\1\42\1\2"+
    "\7\6\5\2\12\6\1\2\7\6\1\113\2\6\5\2"+
    "\1\41\3\2\1\42\1\2\3\6\1\114\3\6\20\2"+
    "\1\115\16\2\1\41\3\2\1\42\15\2\1\6\1\116"+
    "\10\6\1\2\7\6\1\2\2\6\5\2\1\41\3\2"+
    "\1\42\1\2\7\6\5\2\12\6\1\2\7\6\1\2"+
    "\1\6\1\117\5\2\1\41\3\2\1\42\1\2\7\6"+
    "\4\2\33\70\1\120\20\70\33\2\1\41\3\2\1\71"+
    "\15\2\12\6\1\2\1\121\6\6\1\2\2\6\5\2"+
    "\1\41\3\2\1\42\1\2\7\6\5\2\12\73\1\2"+
    "\7\73\1\2\2\73\5\2\1\41\3\2\1\42\1\2"+
    "\7\73\5\2\12\73\1\2\7\73\1\2\2\73\5\2"+
    "\1\41\3\2\1\42\2\2\3\73\1\74\1\75\1\74"+
    "\3\2\1\77\1\2\12\73\1\2\7\73\1\2\2\73"+
    "\5\2\1\41\3\2\1\42\2\2\3\73\1\122\1\75"+
    "\1\122\3\2\1\77\1\2\12\73\1\2\7\73\1\2"+
    "\2\73\5\2\1\41\3\2\1\42\2\2\3\73\1\76"+
    "\1\75\1\76\3\2\1\77\33\2\1\41\3\2\1\42"+
    "\5\2\1\123\1\77\1\123\3\2\1\77\1\2\3\6"+
    "\1\114\6\6\1\2\7\6\1\2\2\6\5\2\1\41"+
    "\3\2\1\42\1\2\7\6\12\2\1\63\14\2\1\124"+
    "\7\2\1\41\3\2\1\42\4\2\1\124\10\2\5\6"+
    "\1\45\4\6\1\2\7\6\1\124\2\6\5\2\1\41"+
    "\3\2\1\42\1\2\3\6\1\125\3\6\5\2\10\6"+
    "\1\126\1\6\1\2\7\6\1\2\2\6\5\2\1\41"+
    "\3\2\1\42\1\2\7\6\5\2\1\6\1\127\10\6"+
    "\1\2\7\6\1\2\2\6\5\2\1\41\3\2\1\42"+
    "\1\2\7\6\5\2\12\6\1\130\7\6\1\2\2\6"+
    "\5\2\1\41\3\2\1\42\1\2\2\6\1\131\4\6"+
    "\5\2\5\6\1\45\4\6\1\2\7\6\1\2\2\6"+
    "\5\2\1\41\3\2\1\42\1\2\7\6\5\2\11\6"+
    "\1\45\1\2\7\6\1\2\2\6\5\2\1\41\3\2"+
    "\1\42\1\2\7\6\5\2\12\6\1\2\3\6\1\132"+
    "\3\6\1\2\2\6\5\2\1\41\3\2\1\42\1\2"+
    "\7\6\11\2\1\133\25\2\1\41\3\2\1\42\15\2"+
    "\4\6\1\110\5\6\1\2\7\6\1\2\2\6\5\2"+
    "\1\41\3\2\1\42\1\2\7\6\12\2\1\134\24\2"+
    "\1\41\3\2\1\42\15\2\4\6\1\135\5\6\1\2"+
    "\7\6\1\2\2\6\5\2\1\41\3\2\1\42\1\2"+
    "\7\6\5\2\12\6\1\2\7\6\1\136\2\6\5\2"+
    "\1\41\3\2\1\42\1\2\3\6\1\111\3\6\4\2"+
    "\33\70\1\137\4\70\1\140\13\70\1\2\5\6\1\141"+
    "\4\6\1\2\7\6\1\2\2\6\5\2\1\41\3\2"+
    "\1\42\1\2\7\6\5\2\12\73\1\2\7\73\1\2"+
    "\2\73\5\2\1\41\3\2\1\42\2\2\3\73\3\122"+
    "\37\2\1\41\3\2\1\42\5\2\3\123\24\2\1\63"+
    "\12\2\1\41\3\2\1\42\15\2\12\6\1\2\4\6"+
    "\1\45\2\6\1\2\2\6\5\2\1\41\3\2\1\42"+
    "\1\2\7\6\5\2\5\6\1\142\4\6\1\2\7\6"+
    "\1\2\2\6\5\2\1\41\3\2\1\42\1\2\7\6"+
    "\5\2\7\6\1\51\2\6\1\2\7\6\1\2\2\6"+
    "\5\2\1\41\3\2\1\42\1\2\7\6\20\2\1\63"+
    "\16\2\1\41\3\2\1\42\15\2\12\6\1\2\1\45"+
    "\6\6\1\2\2\6\5\2\1\41\3\2\1\42\1\2"+
    "\7\6\5\2\12\6\1\2\1\6\1\45\5\6\1\2"+
    "\2\6\5\2\1\41\3\2\1\42\1\2\7\6\12\2"+
    "\1\63\24\2\1\41\3\2\1\42\41\2\1\143\5\2"+
    "\1\41\3\2\1\42\15\2\5\6\1\144\4\6\1\2"+
    "\7\6\1\2\2\6\5\2\1\41\3\2\1\42\1\2"+
    "\7\6\16\2\1\63\20\2\1\41\3\2\1\42\14\2"+
    "\33\70\1\137\4\70\1\145\13\70\54\0\1\2\12\6"+
    "\1\2\7\6\1\2\1\6\1\146\5\2\1\41\3\2"+
    "\1\42\1\2\7\6\5\2\2\6\1\147\7\6\1\2"+
    "\7\6\1\2\2\6\5\2\1\41\3\2\1\42\1\2"+
    "\7\6\12\2\1\150\24\2\1\41\3\2\1\42\15\2"+
    "\12\6\1\2\3\6\1\111\3\6\1\2\2\6\5\2"+
    "\1\41\3\2\1\42\1\2\7\6\4\2\33\151\1\152"+
    "\20\151\1\2\5\6\1\57\4\6\1\2\7\6\1\2"+
    "\2\6\5\2\1\41\3\2\1\42\1\2\7\6\5\2"+
    "\3\6\1\153\6\6\1\2\7\6\1\2\2\6\5\2"+
    "\1\41\3\2\1\42\1\2\7\6\14\2\1\63\22\2"+
    "\1\41\3\2\1\42\14\2\33\151\1\154\4\151\1\0"+
    "\13\151\1\2\7\6\1\110\2\6\1\2\7\6\1\2"+
    "\2\6\5\2\1\41\3\2\1\42\1\2\7\6\4\2"+
    "\33\151\1\154\20\151";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4004];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\14\1\1\0\21\1\2\0\3\1\1\0\13\1"+
    "\1\0\6\1\1\0\11\1\1\0\7\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\0\3\1\1\0\2\1"+
    "\2\0\1\1\1\0\1\1\1\11\2\1\1\0\4\1"+
    "\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    /*private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }*/
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    /*private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }*/

    int get_line()
    {
	return yyline;
    }

    int get_column()
    {
	return yycolumn;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OberonScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException, LexicalException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return OberonLexical.EOF;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return OberonLexical.Identifier;
            }
          case 19: break;
          case 2: 
            { return OberonLexical.Logic_operator;
            }
          case 20: break;
          case 3: 
            { return OberonLexical.Relational_operator;
            }
          case 21: break;
          case 4: 
            { return OberonLexical.Addictive_operator;
            }
          case 22: break;
          case 5: 
            { return OberonLexical.Multiplicative_operator;
            }
          case 23: break;
          case 6: 
            { return OberonLexical.Type_operator;
            }
          case 24: break;
          case 7: 
            { return OberonLexical.Selected_operator;
            }
          case 25: break;
          case 8: 
            { return OberonLexical.Seperated_operator;
            }
          case 26: break;
          case 9: 
            { return OberonLexical.Paratheses;
            }
          case 27: break;
          case 10: 
            { return OberonLexical.Number;
            }
          case 28: break;
          case 11: 
            { return OberonLexical.LineTerminator;
            }
          case 29: break;
          case 12: 
            { /* just skip what was found, do nothing */
            }
          case 30: break;
          case 13: 
            { return OberonLexical.Reserved_word;
            }
          case 31: break;
          case 14: 
            { throw new IllegalCommentException();
            }
          case 32: break;
          case 15: 
            { return OberonLexical.Assign_operator;
            }
          case 33: break;
          case 16: 
            { throw new IllegalIdentifierException();
            }
          case 34: break;
          case 17: 
            { throw new IllegalOctalException();
            }
          case 35: break;
          case 18: 
            { return OberonLexical.Comment;
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
